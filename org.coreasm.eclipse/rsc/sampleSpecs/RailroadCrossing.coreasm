CoreASM RailRoadCrossing

use StandardPlugins
use TimePlugin
use MathPlugin

enum Track = {track1, track2}
enum TrackStatus = {empty, coming, crossing}
enum Direction = {open, close}
enum GateState = {opened, closed}

/**/  
function deadline : Track -> TIME
function trackStatus : Track -> TrackStatus 
function dir : -> Direction
function gateState : -> GateState
/**/

universe Agents = {trackController, gateController, observer, environment}

// Is it safe to open the guard?
derived safeToOpen = 
    forall t in Track holds trackStatus(t) = empty 
    						or (now + dopen) < deadline(t)

init InitRule

rule InitRule = par
	dmin := 5000
	dmax := 10000
	dopen := 2000
	dclose := 2000
	waitTime := 3000 
	gateState := opened
	startTime := now
	forall t in Track do 
		par
			trackStatus(t) := empty
			deadline(t) := infinity
		endpar
	program(trackController) := @TrackControl
	program(gateController) := @GateControl
	program(observer) := @ObserverProgram
	program(environment) := @EnvironmentProgram
	program(self) := undef
endpar

rule TrackControl = 
	par 
		forall t in Track do 
		par
			SetDeadline(t)
			SignalClose(t)
			ClearDeadline(t)
		endpar
		SignalOpen
	endpar


rule GateControl =  
	par
		if dir = open and gateState = closed then gateState := opened
		if dir = close and gateState = opened then gateState := closed
	endpar

rule SetDeadline(x) =
	if trackStatus(x) = coming and deadline(x) = infinity then
		deadline(x) := now + waitTime


rule SignalClose(x) =
	if now >= deadline(x) and now <= deadline(x) + 1000 then
		dir := close


rule ClearDeadline(x) = 
	if trackStatus(x) = empty and deadline(x) < infinity then
		deadline(x) := infinity


rule SignalOpen = 
	if dir = close and safeToOpen then
		dir := open

// The observer
rule ObserverProgram =
	seqblock
		print "Time: " + ((now - startTime) / 1000) + " seconds"
		forall t in Track do
			print "Track " + t + " is " + trackStatus(t)
		print "Gate is " + gateState
		print ""
	endseqblock


// The environment
rule EnvironmentProgram = 
	choose t in Track do
		par
			if trackStatus(t) = empty then 
				if random < 0.05 then par
					trackStatus(t) := coming
					passingTime(t) := now + dmin 
				endpar
			
			if trackStatus(t) = coming then
				if passingTime(t) < now then par
					trackStatus(t) := crossing
					passingTime(t) := now + 3000
				endpar
			
			if trackStatus(t) = crossing then
				if passingTime(t) < now then
					trackStatus(t) := empty
		endpar
