/*  
 * Implementation of the Complete Synod Protocol as in Chapter 2.2 - 2.4 of
 * The Part-Time Parliament, ACM Transactions on Computer Systems, Volume 16 ,  Issue 2  (May 1998)
 *
 * (c) 2008 Paolo Herms 
 */ 
 

CoreASM synod

use StandardPlugins
use TimePlugin

//parameters:
derived failureProbability = 20 // in percent
derived mediumStaying = 9 // in nÂ° of steps where agent is chosen
derived numberOfPriests = 10
derived waitstateTimeout = 5000 // in ms
derived terminateOnSuccess = true // if not loops infinitely

universe Votes
universe Decrees
universe Ballots
universe Messages
universe Priests //every priest has an agent, 
	// seperation to guarantee each agent only accesses it's own state 
	// (local state functions have agent-identifiers as arguments 
	//  and agents never use other agent-identifiers other than self)   

enum STATE = {idle,president,initiatingBallot,awaitingVotes}

enum MESSAGE_TYPE = { MSG_NextBallot, MSG_BeginBallot, MSG_Success, MSG_LastVote, MSG_Voted }

// data attribute functions
function ballotOwner: Ballots -> Priests
function ballotNumber: Ballots -> NUMBER  // initialized with: undef -> -inf

function votePriest: Votes -> Priests
function voteBallot: Votes -> Ballots
function voteDecree: Votes -> Decrees
derived stringOfVote (v) = "{ priest = " + votePriest (v) + "; ballot = " + voteBallot (v) + "; decree = " + voteDecree (v) + " }"

function messageType: Messages -> MESSAGE_TYPE
function nextBallotMessageBallot: Messages -> Ballots
function beginBallotMessageBallot: Messages -> Ballots
function beginBallotMessageDecree: Messages -> Decrees
function successMessageDecree: Messages -> Decrees
function lastVoteMessageBallot: Messages -> Ballots
function lastVoteMessageVote: Messages -> Votes
function votedMessageBallot: Messages -> Ballots
function votedMessagePriest: Messages -> Priests

// global state
function currentPresident: -> Priests
function isInside: Priests -> BOOLEAN
function incomingMessages: Priests -> SET
// set of messages each priest has received, 
// messages are sent by adding them into the set of the receiver
  
// local state
function state: Agents -> STATE
function timer: Agents -> NUMBER
function lastTried: Agents -> Ballots
function prevVotes: Agents -> SET
function quorum: Agents -> SET
function voters: Agents -> SET
function decree: Agents -> Decrees
function outcome: Agents -> Decrees

function nextBallot: Agents -> Ballots
function prevVote: Agents -> Votes 

function priestOfAgent: Agents -> Priests
function stayOther: Agents -> NUMBER

derived mePriest = priestOfAgent (self)
derived isTimeout = now - timer(self) > waitstateTimeout
derived isMajoritySet (set) = | set | > | Priests | / 2
derived haveFoundMajority = isMajoritySet (prevVotes (self))
derived receivedAllVotes = quorum (self) subset voters (self)
derived hasReceivedMessage = incomingMessages (mePriest) != { }

init InitRule

rule InitRule = par
	Ballots(undef) := true
	ballotNumber (undef) := -infinity
	forall n in [ 1 .. numberOfPriests ] do
		extend Agents with a do
		extend Priests with p do
		extend Votes with nullVote do par
			program (a) := @Priest
			priestOfAgent (a) := p
			votePriest (nullVote) := p
			prevVote (a) := nullVote
			isInside (p) := false
			stayOther (a) := 0
		endpar
	program (self) := @LeaderElection
endpar

rule LeaderElection =
	if currentPresident = undef then
		choose p in Priests with isInside (p) do par
			currentPresident := p
			Info (p + " becomes president")
		endpar

rule Priest =
	if stayOther (self) > 0 then par
		stayOther (self) := stayOther (self) - 1
		if isInside (mePriest) then Inside
	endpar
	else par
		choose x in [ 1 .. mediumStaying * 2 ] do
			stayOther (self) := x
		choose fail in [ 1 .. 100 ] do
			if fail <= failureProbability then
					StepOutside
			else
				seq
					StepInside
				next 
					Inside
	endpar

rule StepOutside = 
	if isInside (mePriest) then par
		if currentPresident = mePriest then
			currentPresident := undef
		isInside (mePriest) := false
		Info ("going out")
	endpar

rule StepInside = 
	if not isInside (mePriest) then par
		state (self) := idle
		incomingMessages (mePriest) := { }
		isInside (mePriest) := true
		Info ("Im in")
	endpar

rule Inside = par
	Main
	HandleIncomingMessages
endpar
	 			 
// Main rule: Control State behaviour is controlled here
rule Main = par
		
	if (state (self) = idle) then
		if currentPresident = mePriest then
			state (self) := president

	if (state (self) = president) then
		par
			InitiateBallot
			ResetTimer
			state (self) := initiatingBallot
		endpar

	if (state (self) = initiatingBallot) then
		par
			if haveFoundMajority then
				par
					BeginBallot
					ResetTimer
					state (self) := awaitingVotes
				endpar
			else
				if isTimeout then
					state (self) := president
		endpar

	if (state (self) = awaitingVotes) then
		par
			if receivedAllVotes then
				par
					Success
					state (self) := president
				endpar
			else
				if isTimeout then
					state (self) := president
		endpar

endpar

rule ResetTimer =
	timer (self) := now

rule InitiateBallot = 
	extend Ballots with b do 
	extend Messages with msg do par
		lastTried (self) := b
		ballotOwner (b) := mePriest
		let n = ballotNumber (lastTried (self)) in 
			if n < 0 then
				ballotNumber (b) := 0
			else
				ballotNumber (b) := n + 1 
		prevVotes (self) := { }
		messageType (msg) := MSG_NextBallot
		nextBallotMessageBallot (msg) := b
		SendAll (Priests,  msg)
	endpar
	
rule BeginBallot =
	seq par
		quorum (self) := { p is votePriest (v) | v in prevVotes (self) }
		voters (self) := { }
		choose maxVote in prevVotes (self) with
			voteBallot (maxVote) != undef and 
			forall v in prevVotes (self) holds ballotNumber (voteBallot (v)) <= ballotNumber (voteBallot (maxVote))
		do
			decree (self) := voteDecree (maxVote)
		ifnone
			extend Decrees with new do
				decree (self) := new 
	endpar
	next 
		extend Messages with msg do par
			messageType (msg) := MSG_BeginBallot
			beginBallotMessageDecree (msg) := decree (self)
			beginBallotMessageBallot (msg) := lastTried (self)
			SendAll (quorum (self), msg) 
		endpar

rule Success = 
	extend Messages with msg do par
		outcome (self) := decree (self)
		messageType (msg) := MSG_Success
		successMessageDecree (msg) := decree (self)
		SendAll (Priests, msg)
		Info ("Passing decree " + decree (self))
	endpar

rule HandleLastVote (b, v) = 
	if b = lastTried (self) then 
		add v to prevVotes (self)

rule HandleVoted (b, q) = 
	if b = lastTried (self) then
		add q to voters (self)

rule HandleIncomingMessages =
	forall m in incomingMessages (mePriest) do par
		PrintMessage (m)
		HandleMessage (m)
		remove m from incomingMessages (mePriest)
	endpar

rule HandleMessage (m) = par
	if messageType (m) = MSG_NextBallot then
		HandleNextBallot (nextBallotMessageBallot (m))
	if messageType (m) = MSG_BeginBallot then
		HandleBeginBallot (beginBallotMessageBallot (m), beginBallotMessageDecree (m))
	if messageType (m) = MSG_Success then 
		HandleSuccess (successMessageDecree (m))
	if messageType (m) = MSG_LastVote and state (self) = initiatingBallot then 
		HandleLastVote (lastVoteMessageBallot (m), lastVoteMessageVote (m))
	if messageType (m) = MSG_Voted and state (self) = awaitingVotes then 
		HandleVoted (votedMessageBallot (m), votedMessagePriest (m))
endpar
		
rule HandleNextBallot (b) =
	if ballotNumber (b) > ballotNumber (nextBallot (self)) then 
		extend Messages with msg do par
			nextBallot (self) := b
			messageType (msg) := MSG_LastVote
			lastVoteMessageBallot (msg) := b
			lastVoteMessageVote (msg) := prevVote (self) 
			Send (ballotOwner (b), msg)
		endpar
		
rule HandleBeginBallot (b, d) =
	if b = nextBallot (self) and ballotNumber (nextBallot (self)) > ballotNumber (voteBallot (prevVote (self))) then 
		extend Votes with vote do 
		extend Messages with msg do par
			prevVote (self) := vote
			votePriest (vote) := mePriest
			voteBallot (vote) := b
			voteDecree (vote) := d
			messageType (msg) := MSG_Voted
			votedMessagePriest (msg) := mePriest
			votedMessageBallot (msg) := b
			Send (ballotOwner (b), msg)
		endpar
		
rule HandleSuccess (d) = par
	if outcome (self) = undef then
		outcome (self) := d
	CheckAndExit (d)
endpar

rule SendAll (rcvs, msg) = 
	forall p in rcvs do
		Send (p, msg)

rule Send (rcv, msg) = 
	if isInside (rcv) then
		add msg to incomingMessages (rcv)

rule CheckAndExit (d) = par
	Assert (forall a in Agents holds outcome (a) = undef or outcome (a) = d, "Decrees inconsistent") 
	choose a in Agents with a != self and priestOfAgent (a) != undef and outcome (a) = undef do
		outcome (a) := undef // ensures only one agent selected at last step of execution, 
							// rely on the fact that CoreASM deselects agents which create 
							// conflicting update sets - this may change in future versions!
	ifnone 
		if terminateOnSuccess then
			KillallPrint ("SUCCESS")
endpar

rule Info (text) =
	if currentPresident = mePriest then
		print "President: " + text
	else
		print self + ": " + text
	
rule Assert (c, text) =
	if not c then 
		KillallPrint ("Assertion Error (" + self + "): " + text)

rule KillallPrint (s) = par
	print s
	forall a in Agents do
		program(a) := undef
endpar

rule PrintMessage (m) = 
	let s = "received message - " + messageType (m) in par
		if messageType (m) = MSG_NextBallot then
			Info (s + " { ballot = " + nextBallotMessageBallot (m) + " }")
		if messageType (m) = MSG_BeginBallot then
			Info (s + " { ballot = " + beginBallotMessageBallot (m) + "; decree = " + beginBallotMessageDecree (m) + " }")
		if messageType (m) = MSG_Success then 
			Info (s + " { decree = " + successMessageDecree (m) + " } ")
		if messageType (m) = MSG_LastVote then 
			Info (s + " { ballot = " + lastVoteMessageBallot (m) + "; vote = " +  stringOfVote (lastVoteMessageVote (m)) + " }")
		if messageType (m) = MSG_Voted then 
			Info (s + " { ballot = " + votedMessageBallot (m) + "; priest = " + votedMessagePriest (m) + " }")
	endpar
