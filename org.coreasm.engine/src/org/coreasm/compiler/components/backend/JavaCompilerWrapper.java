package org.coreasm.compiler.components.backend;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.tools.Diagnostic;
import javax.tools.DiagnosticCollector;
import javax.tools.JavaCompiler;
import javax.tools.JavaFileObject;
import javax.tools.StandardJavaFileManager;
import javax.tools.ToolProvider;
import javax.tools.JavaCompiler.CompilationTask;

import org.coreasm.compiler.CompilerEngine;
import org.coreasm.compiler.CompilerOptions;
import org.coreasm.compiler.exception.CompilerException;

/**
 * Wraps access to the Java compiler for easier use.
 * Error messages generated by the Java compiler will be dumped to the command line
 * @author Markus Brenner
 *
 */
public class JavaCompilerWrapper {	
	/**
	 * Compiles the given classes using the system java compiler (note that this will
	 * fail, if no jdk is installed or if the jdk is not added to the PATH variable).
	 * 
	 * @param options Options to be used for the compilation process. Currently unused, but
	 * can be used to add parameters for the java compiler
	 * @param files A list of classes which need to be compiled
	 * @param engine The compiler engine supervising the compilation process
	 * @throws CompilerException If an error occured during the compilation process
	 */
	public static void compile(CompilerOptions options, List<File> files, CompilerEngine engine) throws CompilerException{
		JavaCompiler jc = ToolProvider.getSystemJavaCompiler();
		if(jc == null){
			engine.addError("java compiler not found");
			
			engine.getLogger().error(JavaCompilerWrapper.class, "javac.exe not found");
			throw new CompilerException("java compiler not found - is there a jdk installed?");
		}
		//create a diagnostics object to collect errors
		DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<JavaFileObject>();
		//set up a file manager to provide java sources
		StandardJavaFileManager fileManager = jc.getStandardFileManager(null, null, null);
		Iterable<? extends JavaFileObject> units = fileManager.getJavaFileObjectsFromFiles(files);
		//set compiler options
		ArrayList<String> copt = new ArrayList<String>();
		
		//there was some kind of warning this option prevented from
		//displaying. not sure right now what it was and also its not appearing anymore.
		//leaving this line here for further reference
		//copt.add("-Xlint:unchecked");
		CompilationTask task = jc.getTask(null, fileManager, diagnostics, copt, null, units);

		task.call();
		
		boolean hasError = false;
		
		for(Diagnostic<?> error : diagnostics.getDiagnostics()){
			if(error.getKind() == Diagnostic.Kind.ERROR){
				engine.addError("javac.exe: " + error.toString());
				hasError = true;
			}
			else if(error.getKind() == Diagnostic.Kind.WARNING){
				engine.addWarning("javac.exe: " + error.getMessage(null));
			}
		}	
		
		if(hasError) throw new CompilerException("compilation failed");
		
		try {
			fileManager.close();
		} catch (IOException e) {
			throw new CompilerException("could not close file manager");
		}
	}
}
