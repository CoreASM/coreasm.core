/*	
 * ParserTools.java 	$Revision: 243 $
 * 
 * Copyright (C) 2007 Roozbeh Farahbod
 *
 * Last modified by $Author: rfarahbod $ on $Date: 2011-03-29 02:05:21 +0200 (Di, 29 Mrz 2011) $.
 *
 * Licensed under the Academic Free License version 3.0
 *   http://www.opensource.org/licenses/afl-3.0.php
 *   http://www.coreasm.org/afl-3.0.php
 *
 */
 
package org.coreasm.engine.parser;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.regex.Matcher;

import org.coreasm.engine.EngineError;
import org.coreasm.engine.interpreter.ASTNode;
import org.coreasm.engine.interpreter.Node;
import org.coreasm.engine.interpreter.ScannerInfo;
import org.coreasm.util.Logger;

import org.codehaus.jparsec.Parser;
import org.codehaus.jparsec.Parsers;
import org.codehaus.jparsec.Scanners;
import org.codehaus.jparsec.Terminals;
import org.codehaus.jparsec.Token;
import org.codehaus.jparsec.Tokens;
import org.codehaus.jparsec.functors.Map;
import org.codehaus.jparsec.pattern.Pattern;

/** 
 * This class provides some auxiliary services for parsing. 
 *   
 * @author Roozbeh Farahbod
 * 
 */
public class ParserTools {
	
	/* keeps track of ParserTools instances */
	private static java.util.Map<org.coreasm.engine.parser.Parser, ParserTools> instances = null;
	//private static java.util.Map<Thread, ParserTools> instances = null;
	
	/* lexer */
	private Parser<List<Object>> lexer = null;
	
	/* words */
	private Terminals words = null;
	
	/* identifier parser singleton */
	private Parser<Node> identifierParser = null;
	
	/* whitespace parser singleton */ 
	private Parser<Node> whitespaceParser = null;
	
	/* comment parser singleton */ 
	private Parser<Node> commentParser = null;
	
	/* delimiter parser singleton */ 
	private Parser<Node> delimiterParser = null;
	
	/* optional delimiter parser singleton */ 
	private Parser<Node> optionalDelimiterParser = null;
	
	/* delimiter with eol parser singleton */
	private Parser<Node> eolDelimParser = null;

	/* delimiter without eol parser singleton */
	private Parser<Node> nonEOLDelimParser = null;

	/* space/tab delimiter parser singleton */
	private Parser<Node> spaceTabDelimParser = null;

	/* a pattern that rejects the sequence if it is a keyword */
	private Pattern identifierPattern = null;
	
	/* all the operator parsers created so far in this runtime */
	private java.util.Map<String, Parser<Node>> oprParsers = null;
	
	/* all the keyword parsers created so far in this runtime */
	private java.util.Map<String, Parser<Node>> kwParsers = null;

	/* list of operators provided by plug-ins */
	private String[] operators = null;
	private Set<String> operatorSet = null;
	
	/* list of keywords provided by plug-ins */
	private String[] keywords = null;
	private Set<String> keywordSet = null;

	//private List<Parser<Token>> lexerParts = null;
	private List<Parser<? extends Object>> lexerParts = null;
	
	/* initialized flag */
	private boolean initialized = false;
	
	/* a reference to an instance of CoreASM Parser */
	private final org.coreasm.engine.parser.Parser coreasmParser;
	
	/*
	 * Private constructor to avoid default constructor.
	 */
	private ParserTools(org.coreasm.engine.parser.Parser parser) {
		coreasmParser = parser;
	}
	
	/**
	 * Create a new ParserTools singleton for the current thread.
	 *  
	 * @return an instance of ParserTools
	 */
	public static synchronized ParserTools getInstance(org.coreasm.engine.parser.Parser coreasmParser) {
		if (instances == null) 
			instances = new HashMap<org.coreasm.engine.parser.Parser, ParserTools>();
		
		ParserTools instance = instances.get(coreasmParser);
		
		if (instances.get(coreasmParser) == null) {
			instance = new ParserTools(coreasmParser);
			instances.put(coreasmParser, instance);
		}
		
		return instance;
		/* old version
		if (instances == null) 
			instances = new HashMap<Thread, ParserTools>();
		
		ParserTools instance = instances.get(Thread.currentThread());
		
		if (instances.get(Thread.currentThread()) == null) {
			instance = new ParserTools(coreasmParser);
			instances.put(Thread.currentThread(), instance);
		}
		
		return instance;
		*/
	}
	
	public void initialize(String[] operators, String[] keywords, Set<Parser<Object>> lexers) {
		if (!initialized) {
			
			// caching values for future use
			this.operators = operators;
			operatorSet = new HashSet<String>();
			for (String opr: operators)
				operatorSet.add(opr);
			operatorSet = Collections.unmodifiableSet(operatorSet);
			this.keywords = keywords;
			keywordSet = new HashSet<String>();
			for (String opr: keywords)
				keywordSet.add(opr);
			keywordSet = Collections.unmodifiableSet(keywordSet);
			
			//lexerParts = new ArrayList<Parser<Token>>(lexers);
			lexerParts = new ArrayList<Parser<? extends Object>>(lexers);
			initialized = true;
			
			getLexer();
			
		} else
			throw new EngineError("Cannot re-initialize ParserTools.");
	}

	@SuppressWarnings("unchecked")
	public Parser<List<Object>> getLexer() {
		if (!initialized)
			throw new IllegalStateException("ParserTools is not initialized.");
		
		if (lexer == null) {
			CommentTokenizer commentTokenizer = new CommentTokenizer();
			
			// line comment (new)
			Parser<Void> lineCommentScanner = Scanners.JAVA_LINE_COMMENT;
			Parser<Tokens.Fragment> lcTokParser =
				lineCommentScanner.map(new Map<Void, Tokens.Fragment> () {
					@Override
					public Tokens.Fragment map(Void from) {
						return Tokens.fragment("[line comment]", CoreASMTokenType.Comment);
					}
				});
			
			// line comment (old)
			/*Parser<_> lineCommentScanner = Scanners.JAVA_LINE_COMMENT;
			Parser<Tok> lcTokParser = Lexers.lexer("Java Line Comment", 
					lineCommentScanner, 
					commentTokenizer, 
					"lexer error: line comment");*/
			
			// block comment
			Parser<Void> blockCommentScanner = Scanners.JAVA_BLOCK_COMMENT;
			Parser<Tokens.Fragment> bcTokParser =
				blockCommentScanner.map(new Map<Void, Tokens.Fragment> () {
					@Override
					public Tokens.Fragment map(Void from) {
						return Tokens.fragment("[block comment]", CoreASMTokenType.Comment);
					}				
				});
			
			// block comment (old)
			//Parser<_> blockCommentScanner = Scanners.isBlockComment("/*", "*/");
			/*Parser<Tok> bcTokParser = Lexers.lexer("Block Comment", 
					blockCommentScanner, 
					commentTokenizer, 
					"lexer error: block comment");*/
			
			// whitespace
			Parser<Void> whitespaceScanner = Scanners.WHITESPACES;
			Parser<Tokens.Fragment> wsTokParser = 
				whitespaceScanner.map(new Map<Void, Tokens.Fragment> () {
					@Override
					public Tokens.Fragment map(Void from) {
						return Tokens.fragment("_", CoreASMTokenType.Whitespace);
					}
				});
			
			// whitespace (old)
			/*Parser<_> whitespaceScanner = Scanners.isWhitespaces();
			Parser<Tok> wsTokParser = Lexers.lexer("Whitespace", 
					whitespaceScanner, 
					new WhitespaceTokenizer(), 
					"lexer error: whitespace");*/
			
			words = Terminals.caseSensitive(operators, keywords);
			
			lexerParts.add(0, words.tokenizer());
			lexerParts.add(0, wsTokParser);
			lexerParts.add(0, bcTokParser);
			lexerParts.add(0, lcTokParser);
			
			Parser[] lexers = new Parser[1];
			Parser<Object> tokenLexer = Parsers.or(lexerParts.toArray(lexers));
			
			lexer = tokenLexer.many().followedBy(Parsers.EOF);
		}

		return lexer;
	}
	
	/**
	 * Returns a parser that parses operator <code>str</code>
	 */
	public Parser<Node> getOprParser(final String str) {
		if (oprParsers == null)  
			oprParsers = new HashMap<String, Parser<Node>>();
		
		Parser<Node> parser = oprParsers.get(str);
		
		if (parser == null) {
			//Parser<Tok> tokParser = words.getParser(str);
			//parser = tokParser.map(new LiteralMap("Kernel", Node.OPERATOR_NODE));
			parser = Parsers.token(new FromToken<Node>() {

				public Node fromToken(Tok tok) {
					final Object t = tok.getToken();

					if (t instanceof TypedToken) {
						final TypedToken c = (TypedToken)t;
						if (!c.getType().equals(TokenType.Reserved))
							return null;
						if (!c.getText().equals(str))
							return null;
						return new Node(
								"Kernel",
								c.toString(),
								new ScannerInfo(tok),
								Node.OPERATOR_NODE
								);
					} else 
						return null;
				}});
			oprParsers.put(str, parser);
		}
		
		return parser;
	}
	
	/**
	 * Returns the set of all the operators defined so far.
	 */
	public Set<String> getOperators() {
		if (operatorSet != null) {
			return operatorSet;
		}
		else
			return Collections.emptySet();
	}

	/**
	 * Provides a keyword parser that would parse a keyword into a 
	 * properly created {@link Node} object.
	 * 
	 * @param keyword the keyword
	 * @param pluginName plugin name
	 */
	public Parser<Node> getKeywordParser(final String keyword, final String pluginName) {
		if (kwParsers == null)  
			kwParsers = new HashMap<String, Parser<Node>>();
		
		Parser<Node> parser = kwParsers.get(keyword);
		
		if (parser == null) {
			//Parser<Tok> tokParser = words.getParser(keyword);
			//parser = tokParser.map(new LiteralMap(pluginName, Node.KEYWORD_NODE));
			parser = Parsers.token(new FromToken<Node>() {

				public Node fromToken(Tok tok) {
					final Object t = tok.getToken();

					if (t instanceof TypedToken) {
						final TypedToken c = (TypedToken)t;
						if (!c.getType().equals(TokenType.Reserved))
							return null;
						if (!c.getText().equals(keyword))
							return null;
						return new Node(
								pluginName,
								c.toString(),
								new ScannerInfo(tok),
								Node.KEYWORD_NODE
								);
					} else 
						return null;
				}});
			kwParsers.put(keyword, parser);
		}

		return parser;
	}

	/**
	 * Returns the set of all the keywords defined so far.
	 */
	public Set<String> getKeywords() {
		if (keywordSet != null)
			return keywordSet;
		else
			return Collections.emptySet();
	}

	/**
	 * Returns a whitespace parser singleton.
	 */
	@SuppressWarnings("serial")
	public  Parser<Node> getWhitespaceParser() {
		if (whitespaceParser == null) {
			whitespaceParser = Parsers.token(new IsCoreASMTokenOfType(CoreASMTokenType.Whitespace) {

				@Override
				public Node createNode(Tok tok) {
					return new Node(
							"Kernel",
							tok.toString(),
							new ScannerInfo(tok),
							Node.WHITESPACE_NODE
							);
				}
				
			});
		}
		return whitespaceParser;
	}

	/**
	 * Returns a comment parser singleton.
	 */
	@SuppressWarnings("serial")
	public  Parser<Node> getCommentParser() {
		if (commentParser == null) {
			commentParser = Parsers.token(new IsCoreASMTokenOfType(CoreASMTokenType.Comment) {

				@Override
				public Node createNode(Tok tok) {
					return new Node(
							"Kernel",
							tok.toString(),
							new ScannerInfo(tok),
							Node.COMMENT_NODE
							);
				}
				
			});
		}
		return commentParser;
	}

	/**
	 * Returns a delimiter parser singleton. Such a parser includes 
	 * whitespaces and comments.
	 */
	public  Parser<Node> getDelimiterParser() {
		if (delimiterParser == null) {
			getCommentParser();
			getWhitespaceParser();
			delimiterParser = Parsers.alt(whitespaceParser, commentParser).many1(Node.class).map(new DelimiterMap());
			optionalDelimiterParser = Parsers.alt(whitespaceParser, commentParser).many(Node.class).map(new DelimiterMap());
			
			/*
			Parser<_> spaceTabScanner = Scanners.isPattern(Patterns.among(new char[] {' ', '\t'}), "space");
			Parser<Tok> stTokParser = Lexers.lexer("Space/Tab", 
					spaceTabScanner, 
					getStringTokenizer(), 
					"lexer error: space/tab");
			Parser<Node> stParser = stTokParser.map("Space/Tabl", new WhitespaceMap());
			Parser<Node[]> stDelimParser = stParser.many(Node.class);
			spaceTabDelimParser = Parsers.map("space/tab", stDelimParser, new DelimiterMap());
			*/
			
			nonEOLDelimParser = delimiterParser.isReturn(new ObjectPredicate<Node>() {

				public boolean isObject(Node v) {
					return !v.getToken().contains("\n");
				}
				
			});
			spaceTabDelimParser = nonEOLDelimParser.optional();

			eolDelimParser = delimiterParser.isReturn(new ObjectPredicate<Node>() {

				public boolean isObject(Node v) {
					return v.getToken().contains("\n");
				}
				
			});

		}
		return delimiterParser;
	}
	
	/**
	 * Returns an optional delimiter parser singleton. Such a parser includes 
	 * whitespaces and comments.
	 * 
	 */
	public  Parser<Node> getOptionalDelimiterParser() {
		if (delimiterParser == null) {
			getDelimiterParser();
		}
		return optionalDelimiterParser;
	}

	/**
	 * Returns a delimiter parser singleton that accept at least one EOL. Such a parser includes 
	 * whitespaces and comments.
	 * 
	 */
	public  Parser<Node> getEOLDelimiterParser() {
		if (delimiterParser == null) {
			getDelimiterParser();
		}
		return eolDelimParser;
	}

	/**
	 * Returns a delimiter parser singleton that does not accept EOL. Such a parser includes 
	 * whitespaces and comments.
	 * 
	 */
	public  Parser<Node> getNonEOLDelimiterParser() {
		if (delimiterParser == null) {
			getDelimiterParser();
		}
		return nonEOLDelimParser;
	}

	/**
	 * Returns a delimiter parser singleton that only accepts space and tab. 
	 * 
	 */
	public  Parser<Node> getSTDelimiterParser() {
		if (delimiterParser == null) {
			getDelimiterParser();
		}
		return spaceTabDelimParser;
	}

	/**
	 * Provides an identifier parser that would parse a CoreASM identifier into a 
	 * properly created {@link Node} object.
	 * 
	 */
	public Parser<Node> getIdentifierParser() {

		if (identifierParser == null) {
			identifierParser = Parsers.token(new FromToken<Node>() {

				public Node fromToken(Tok tok) {
					Object token = tok.getToken();
					if (token instanceof TypedToken) {
						if (((TypedToken)token).getType().equals(TokenType.Word)) 
							return new ASTNode(
									"Kernel", 
									ASTNode.ID_CLASS, 
									"ID", 
									tok.toString(),
									new ScannerInfo(tok),
									Node.GENERAL_ID_NODE
									);
						else
							return null;
					} else
						return null;
				}
				
			});
		}
		
		return identifierParser;
	}

	/**
	 * Converts a <code>Parser&lt;Object&gt;</code> to a 
	 * <code>Parser&lt;Object[]&gt;</code> one.
	 *  
	 * @param parser 
	 */
	public Parser<Object[]> toObjectArray(Parser<? extends Object> parser) {
		return Parsers.map("", parser, new jfun.parsec.Map<Object, Object[]>() {

			public Object[] map(Object v) {
				Object[] result = new Object[1];
				result[0] = v;
				return result;
			}});
	}
	
	/**
	 * Returns a parser that is a sequence of the given parsers. 
	 * The resulting parser will return an array of Objects.
	 * <p>
	 * P: P1 ... Pn
	 *  
	 * @param parsers parsers to be sequenced
	 */
	public Parser<Object[]> seq(Parser<? extends Object>...parsers) {
		return seq("parser", parsers);
	}
	
	/**
	 * Returns a parser that is a sequence of the given parsers. 
	 * The resulting parser will return an array of Objects.
	 * <p>
	 * P: P1 ... Pn
	 *
	 * @param name name of the new parser
	 * @param parsers parsers to be sequenced
	 */
	public Parser<Object[]> seq(String name, Parser<? extends Object>...parsers) {
		Parser<Object[]> seqParser = Parsers.array(parsers, new ParseMapN<Object[]>("") {

			public Object[] map(Object... vals) {
				Object[] nodes = new Object[vals.length];
				
				for (int i=0; i < vals.length; i++) 
					nodes[i] = vals[i];
				
				return nodes;
			}
			
		});
			
		return seqParser;
	}
	
	/**
	 * Returns a parser P that is:
	 * <p>
	 * P: parser*
	 *
	 * @param parser parser to be repeated
	 */
	public Parser<Object[]> many(Parser<? extends Object> parser) {
		return many("parser", parser);
	}
	
	/**
	 * Returns a parser P that is:
	 * <p>
	 * P: parser*
	 * 
	 * @param name name of the new parser
	 * @param parser parser to be repeated
	 */
	public Parser<Object[]> many(String name, Parser<? extends Object> parser) {
		Parser<Object[]> result = Parsers.many(name, Object.class, parser);		
		return result;
	}
	
	/**
	 * Returns a parser P that is:
	 * <p>
	 * P: ( parser delimiter )*
	 *
	 * @param parser parser to be repeated
	 */
	public Parser<Object[]> star(Parser<? extends Object> parser) {
		return star("parser", parser);
	}
	
	/**
	 * Returns a parser P that is:
	 * <p>
	 * P: ( parser delimiter )*
	 * 
	 * @param name name of the new parser
	 * @param parser parser to be repeated
	 */
	public Parser<Object[]> star(String name, Parser<? extends Object> parser) {
		Parser<Object[]> result = seq(name, parser, getOptionalDelimiterParser()).many(Object[].class).map(
				new Map<Object[][], Object[]>() {

					public Object[] map(Object[][] v) {
						ArrayList list = new ArrayList();
						for (Object[] arr: v) 
							for (Object obj: arr)
								list.add(obj);
						return list.toArray();
					}
				}
		);
		
		return result;
	}
	
	/**
	 * Returns a parser P that is:
	 * <p>
	 * P: ( parser delimiter )+
	 *
	 * @param parser parser to be repeated at least once
	 */
	public Parser<Object[]> plus(Parser<? extends Object> parser) {
		return plus("parser", parser);
	}
	
	/**
	 * Returns a parser P that is:
	 * <p>
	 * P: ( parser delimiter )+
	 * 
	 * @param name name of the new parser
	 * @param parser parser to be repeated at least once
	 */
	public Parser<Object[]> plus(String name, Parser<? extends Object> parser) {
		return plus(name, parser, getOptionalDelimiterParser());
	}
	
	/**
	 * Returns a parser P that is:
	 * <p>
	 * P: ( parser delimiter )+
	 * 
	 * @param parser parser to be repeated at least once
	 * @param delimiter the delimiter parser
	 */
	public Parser<Object[]> plus(Parser<? extends Object> parser, Parser<Node> delimiter) {
		return plus("parser", parser, delimiter);
	}
	
	/**
	 * Returns a parser P that is:
	 * <p>
	 * P: ( parser delimiter )+
	 * 
	 * @param name name of the new parser
	 * @param parser parser to be repeated at least once
	 * @param delimiter the delimiter parser
	 */
	public Parser<Object[]> plus(String name, Parser<? extends Object> parser, Parser<Node> delimiter) {
		Parser<Object[]> result = seq(name, parser, delimiter).many1(Object[].class).map(
				new Map<Object[][], Object[]>() {

					public Object[] map(Object[][] v) {
						ArrayList list = new ArrayList();
						for (Object[] arr: v) 
							for (Object obj: arr)
								list.add(obj);
						return list.toArray();
					}
				}
		);
		
		return result;
	}
	
	/**
	 * Returns a parser P that is:
	 * <p>
	 * P: parser delimiter (',' delimiter parser delimiter)*
     * 
	 * @param parser parser to be repeated at least once
	 */
	public Parser<Object[]> csplus(Parser<? extends Object> parser) {
		return csplus("parser", parser);
	}
	
	/**
	 * Returns a parser P that is:
	 * <p>
	 * P: parser delimiter (commaParser delimiter parser delimiter)*
     * 
     * @param commaParser the parser that parses the comma or any other symbol 
	 * @param parser parser to be repeated at least once
	 */
	public Parser<Object[]> csplus(Parser<? extends Object> commaParser, Parser<? extends Object> parser) {
		return csplus("parser", commaParser, parser);
	}
	
	/**
	 * Returns a parser P that is:
	 * <p>
	 * P: parser delimiter (',' delimiter parser delimiter)*
	 * 
	 * @param name name of the new parser
	 * @param parser parsers to be repeated at least once
	 */
	public Parser<Object[]> csplus(String name, Parser<? extends Object> parser) {
		return csplus(name, getOprParser(","), parser);
	}
	
	/**
	 * Returns a parser P that is:
	 * <p>
	 * P: parser delimiter (commaParser delimiter parser delimiter)*
	 * 
	 * @param name name of the new parser
	 * @param commaParser the parser that parses the comma or any other symbol
	 * @param parser parser to be repeated at least once
	 */
	@SuppressWarnings("unchecked")
	public Parser<Object[]> csplus(String name, Parser<? extends Object> commaParser, Parser<? extends Object> parser) {
		Parser<Object[]> repeated = 
			star(
				seq(
					commaParser,
					getOptionalDelimiterParser(),
					parser,
					getOptionalDelimiterParser()
					)
				);
		
		Parser<Object[]> result = seq(name, 
				parser, 
				getOptionalDelimiterParser(),
				repeated
				);
		
		return result;
	}
	
	/**
	* Create a lazy evaluated parser.
	* When evaluated, it reads the parser object stored in an array indexed by pos.
	* 
	* @param name of the new parser 
	* @param placeholder the array that contains parser object.
	* @return the lazy parser.
	*/
	public static <R> Parser<R> lazy(String name, final Parser<R>[] placeholder){
		return Parsers.lazy(name, new ParserEval<R>(){
			public Parser<R> eval() {
				return placeholder[0];
			}
		});
	}

	/**
	 * A tokenizer that returns a comment token.
	 * 
	 * @author Roozbeh Farahbod
	 * @see CoreASMTokenType
	 */
	@SuppressWarnings("serial")
	public static final class CommentTokenizer implements Tokenizer {

		/**
		 * Returns a {@link Tok} instance as the token.
		 */
		public Object toToken(CharSequence cs, int from, int len) {
			TypedToken<CoreASMTokenType> tToken = 
				new TypedToken<CoreASMTokenType>(cs.subSequence(from, from + len).toString(), 
						CoreASMTokenType.Comment);
			//return new Tok(from, len, tToken);
			return tToken;
		}
		
	}
	
	/**
	 * A tokenizer that returns a whitespace token.
	 * 
	 * @author Roozbeh Farahbod
	 * @see CoreASMTokenType
	 */
	@SuppressWarnings("serial")
	public static final class WhitespaceTokenizer implements Tokenizer {

		/**
		 * Returns a {@link Tok} instance as the token.
		 */
		public Object toToken(CharSequence cs, int from, int len) {
			TypedToken<CoreASMTokenType> tToken = 
				new TypedToken<CoreASMTokenType>(cs.subSequence(from, from + len).toString(), 
						CoreASMTokenType.Whitespace);
			return tToken;
			//return new Tok(from, len, tToken);
		}
		
	}
	
	/**
	 * A delimiter parse map.
	 *   
	 */
	@SuppressWarnings("serial")
	public static final class DelimiterMap implements Map<Object[], Node> {

		public Node map(Object[] v) {
			if (v.length == 0)
				return null;
			
			String token = "";
			Node node;
			ScannerInfo info = null;
			for (Object obj: v) {
				if (obj instanceof Node) {
					node = (Node)obj;
					if (node.getToken() != null)
						token = token + node.getToken();
					if (info == null)
						info = node.getScannerInfo();
				} else
					Logger.log(Logger.ERROR, Logger.parser, "One of the delimiters is not a Node object.");
			}
			return new Node(
					"Kernel",
					token,
					info,
					Node.DELIMITER_NODE);
		}

	}
	
	/**
	 * A special Map that maps comments in form of {@link Tok} to {@link Node}.
	 * @author Roozbeh Farahbod
	 *
	 */
	@SuppressWarnings("serial")
	public static final class CommentMap extends ParseMap<Tok, Node> {

		public CommentMap() {
			super("Kernel");
		}

		public Node map(Tok v) {
			return new Node(
					pluginName,
					v.toString(),
					new ScannerInfo(v),
					Node.COMMENT_NODE
					);
		}
		
	}

	/**
	 * A special Map that maps whitespaces in form of {@link Tok} to {@link Node}.
	 * @author Roozbeh Farahbod
	 *
	 */
	@SuppressWarnings("serial")
	public static final class WhitespaceMap extends ParseMap<Tok, Node> {

		public WhitespaceMap() {
			super("Kernel");
		}

		public Node map(Tok v) {
			return new Node(
					pluginName,
					v.toString(),
					new ScannerInfo(v),
					Node.WHITESPACE_NODE
					);
		}
		
	}

	/**
	 * A special Map that maps {@link Tok} to {@link Node}.
	 * This is used for all reserved words (operators and keywords).
	 * 
	 * @author Roozbeh Farahbod
	 *
	 */
	@SuppressWarnings("serial")
	public static final class LiteralMap extends ParseMap<Tok, Node> {

		final String type;
		
		/**
		 * Creates a new literal map.
		 * 
		 * @param pluginName name of the plugin creating this literal
		 * @param literalType type of the literal. See {@link Node}.
		 */
		public LiteralMap(String pluginName, String literalType) {
			super(pluginName);
			type = literalType;
		}

		public Node map(Tok v) {
			return new Node(
					pluginName,
					v.toString(),
					new ScannerInfo(v),
					type
					);
		}
	}

	/**
	 * A special Map that maps {@link Tok} to {@link ASTNode} as
	 * an identifier.
	 *  
	 * @author Roozbeh Farahbod
	 *
	 */
	@SuppressWarnings("serial")
	public static final class IdentifierMap extends ParseMap<String, Node> {

		public IdentifierMap() {
			super("Kernel");
		}

		public Node map(String v) {
			return new ASTNode(
							pluginName, 
							ASTNode.ID_CLASS, 
							"ID", 
							v.toString(),
							new ScannerInfo(), // new ScannerInfo(v),
							Node.GENERAL_ID_NODE
							);
		}
		
	}

	// 
	// NOT USED
	//

	/**
	 * Returns an identifier pattern singleton. This pattern
	 * does not accept a keyword or an operator as an identifier.
	 * 
	 */
	public Pattern getIdenPatternPattern(){
		if (identifierPattern == null) {
			 identifierPattern = new Pattern() {
				public int match(final CharSequence src, final int len, final int from) {
			        if(from > len) return Pattern.MISMATCH;
					final java.util.regex.Pattern p = java.util.regex.Pattern.compile("[a-zA-Z_][0-9a-zA-Z_]*[']*");
			        final Matcher matcher = p.matcher(src.subSequence(from, len));
			        if (matcher.lookingAt()) {
			        	int end = matcher.end();
						String input = src.subSequence(from, from + end).toString();
						if (getKeywords().contains(input) || getOperators().contains(input))
							return Pattern.MISMATCH;
						else
							return end;
			        } else
			        	return Pattern.MISMATCH;
				}

				public String toString(){
					return "identifier";
				}
			};
		}
		return identifierPattern;
	}

}


