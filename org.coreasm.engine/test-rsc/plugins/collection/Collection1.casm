CoreASM Collection1

use Standard

init Start

/*
 * @minsteps 1
 * @maxsteps 1
 *
 * @require "99979999\n"
 * @require "2\n"
 * @require "length of all words is: 26\n"
 * @require "6\n"
 * @require "[3, 4, 5, 1]\n"
 * @require "[banana yeah, orangina yeah, melon yeah, cupcake yeah]\n"
 * @require "{2, 8}\n"
 * @require "{hello, true}\n"
 */
rule Start =
	seqblock
		numberRange := [-2..2 step 1]
		list := [1,2,3,-1]
		set := {2,-4,8,-2}
		wordList := ["banana", "orangina", "melon", "cupcake"]
		boolList := [true,true,false,true]
		mixedSet := {"hello", 55, "howRyou" , true, 103}
		print foldl(numberRange,@someMath,1)
		print foldl(list,@someMath,1)
		print "length of all words is: " + foldl(wordList,@getLength,0)
		print foldr(list,@someMath,1)
		print map(list,@increase)
		print map(wordList,@makeItBetter)
		print filter(set,@noNegativeNumbers)
		print filter(mixedSet,@justSmallLetters)
	endseqblock
derived someMath(x, y) = x^2-y
derived getLength(sum, x) = sum + strlen(x)
derived increase(x) = x+2
derived makeItBetter(x) = x + " yeah"
derived noNegativeNumbers(x) = return a in if(x < 1) then a:= false else a:= true
derived justSmallLetters(x) = return a in if(matches(toString(x),"[a-z]+")) then a := true else a := false