CoreASM Set1_comprehension

use Standard
use Math

init Start

/*
 * @minsteps 1
 * @maxsteps 1
 *
 * @require "[-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10]\n[]\n[]\n[2, 4, 6, 8, 10]\n[2, 4, 6, 8, 10]\n[2, 4, 6, 8, 10]\n[[1, 4], [1, 5], [1, 6], [2, 4], [2, 5], [2, 6], [3, 4], [3, 5], [3, 6]]\n"
 */
rule Start =
	seqblock
		// numberRange inside set-comprehension
		list1 := [a | a in [-10..10 step 1] with isEvenNumber(a)]
		print list1
		// empty set
		list2 := [a | a in [] with isEvenNumber(a)]
		print list2
		//no result possible
		list3 := [a | a in [1,2,3,4] with x > 10000]
		print list3
		// set-comprehension inside set-comprehension
		list4 := [a | a in [b^(1/2) | b in [1..100 step 1]] with isEvenNumber(a)]
		print list4
		// set-comprehension inside set-comprehension with basic derived math function sqrt
		list5 := [a | a in [sqrt(b) | b in [1..100 step 1]] with isEvenNumber(a)]
		print list5
		// handling values from two different sets
		list6 := [a | a in list1, b in list4 with a = b ]
		print list6
		print [[a,b] | a in [1,2,3], b in [4,5,6]]
	endseqblock